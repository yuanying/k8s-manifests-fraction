---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: code
  name: code
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    name: code
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    name: code
  name: code
data:
  000-default.conf: |
    server_names_hash_bucket_size 64;
    server {
        listen       80;
        server_name  localhost;
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
  code.conf: |
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
    server {
      listen 80;
      server_name code.fraction.jp;
      server_tokens off;
      client_max_body_size 2G;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      location / {
        proxy_pass http://192.168.1.82:9090;
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    nginx: code
  name: code
spec:
  replicas: 2
  selector:
    matchLabels:
      name: code
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: code
    spec:
      containers:
      - image: nginx:alpine
        imagePullPolicy: Always
        name: code
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        ports:
          - name: http
            containerPort: 80
        volumeMounts:
          - name: config
            mountPath: /etc/nginx/conf.d
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
        - name: config
          configMap:
            name: code
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'true'
  labels:
    name: code
  name: code
spec:
  rules:
    - host: "code.fraction.jp"
      http:
        paths:
          - backend:
              serviceName: code
              servicePort: 80
  tls:
    - secretName: code-tls
      hosts:
        - "code.fraction.jp"
